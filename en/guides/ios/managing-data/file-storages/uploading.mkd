---
layout: en-doc
title: Uploading Files
sort-priority: 10
old-url: /en/upload-files--3
---
Kii Cloud SDK offers the following two types of file uploading.

* **Uploading with resumable transfer:** This allows you to suspend/resume file uploading.  For example, you will be able to resume a file upload when it is interrupted in the middle due to some reasons (e.g., network down or manual interruption).  The mechanism is especially useful when you are to upload a big file under poor network condition.  You will not have to restart the whole uploading again if it is interrupted in the middle; you can simply resume the upload from where you were left off.

* **Uploading without resumable transfer:** This is all-or-nothing file uploading without any suspend/resume feature.  If the upload is interrupted in the middle, you will need to restart the upload from the start.

## Uploading a File with Resumable Transfer

Check the following snippet to see how you can upload a file with the resumable feature.

```objc
// Create a reference to the existing local file
KiiFileBucket *bucket = [[KiiUser currentUser] fileBucketWithName:@"MyBucket"];
NSString *fileName = @"sample.mp4";
NSString *path = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];
KiiFile *file = [bucket fileWithLocalPath:path];

// Create a KiiUploader
KiiUploader *uploader = [file uploader:path];

// Create a progress block
KiiRTransferBlock progress = ^(id <KiiRTransfer> transferObject, NSError *retError) {
  KiiRTransferInfo *info = [transferObject info];
  NSLog(@"Progress : %f", (float) [info completedSizeInBytes] / [info totalSizeInBytes]);
};

// Create a completion block
KiiRTransferBlock completion = ^(id <KiiRTransfer> transferObject, NSError *retError) {
  if (retError != nil) {
    // There is something wrong
    NSLog(@"Transfer error happens");
  }
};

// Do upload
[uploader transferWithProgressBlock:progress
                 andCompletionBlock:completion];
```

Here is what is taking place in the snippet:

* Create a reference to the target file ("sample.mp4").
* Create a KiiFile instance by invoking `fileWithLocalPath` method.
* Create a `KiiUploader` instance by invoking `uploader` method while specifying the target file reference.
* Define a progress block and completion blocks.
* Start uploading by invoking `transfer` method.

Invoking tranfer method starts the file upload. If everything go well, the file will be uploaded to Kii Cloud. If the upload is interrupted for some reasons, the completion block will be called with the corresponding NSError value.  In this case, you can resume the upload (check the next section).

### Resuming a Suspended Upload
File uploading could be suspended either automatically (e.g., by network failure) or manually (e.g., by user interruption). The suspended file upload can later be resumed so as to continue the upload from the point where it was interrupted.

Check the following snippet to see how to resume the suspended file upload.

```objc
// Create file bucket
KiiFileBucket *bucket = [[KiiUser currentUser] fileBucketWithName:@"MyBucket"];
KiiRTransferManager *manager = [bucket transferManager];

// Get upload entries from transfer manager
NSError *error = nil;
NSArray *uploadEntries = [manager getUploadEntries:&error];

// Parse through the upload entries
for (KiiUploader *uploader in uploadEntries) {

  // If upload is in suspended satus, try to resume the transfer
  if ([[uploader info] status] == SUSPENDED) {
    // Create a progress block
    KiiRTransferBlock progress = ^(id <KiiRTransfer> transferObject, NSError *retError) {
      KiiRTransferInfo *info = [transferObject info];
      NSLog(@"Progress : %f", (float) [info completedSizeInBytes] / [info totalSizeInBytes]);
    };
    // Create a completion block
    KiiRTransferBlock completion = ^(id <KiiRTransfer> transferObject, NSError *retError) {
      if (retError != nil) {
        // There is something wrong
        NSLog(@"Transfer error happens");
      }
    };
    [uploader transferWithProgressBlock:progress andCompletionBlock:completion];
  }

}
```

Here is what is taking place in the snippet:

* Create a `KiiFileBucket` instance of the file bucket to which the file is being uploaded.
* Create a `KiiRTransferManager` instance by invoking `transferManager` method.
* Get a list of KiiUploader instances by invoking `getUploadEntries` method.
* For the KiiUploader instance you want to resume, invoke `transfer` method.

###Manually Suspending a File Upload
The ongoing file upload can be manually suspended. Check the following snippet to see how you can suspend the file upload.  In this example, we are suspending the upload for the file "sample2.mp4".

```objc
// Create file bucket
KiiFileBucket *bucket = [[KiiUser currentUser] fileBucketWithName:@"MyBucket"];
KiiRTransferManager *manager = [bucket transferManager];

// Get upload entries from transfer manager
NSError *error = nil;
NSArray *uploadEntries = [manager getUploadEntries:&error];

// Specify file that you want to terminate
NSString *fileName = @"sample2.mp4";
NSString *path = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];

for (KiiUploader *uploader in uploadEntries) {
  if ([[uploader localPath] isEqualToString:path] {
    // Suspend uploading
    NSError *suspendError = nil
    [uploader suspend:&suspendError];
  }
}
```

Basically, just invoke `suspend` method. This will suspend the target file upload unless the upload is already finished.

###Manually Terminating a File Upload
The ongoing or suspended file upload can be manually terminated. Once terminated, you will not be able to resume the file upload; you will need to start uploading the file from the beginning.

Check the following snippet to see how you can terminate the file upload.  In this example, we are terminating the upload for the file "sample3.mp4".

```objc
// Create file bucket
KiiFileBucket *bucket = [[KiiUser currentUser] fileBucketWithName:@"MyBucket"];
KiiRTransferManager *manager = [bucket transferManager];

// Get upload entries from transfer manager
NSError *error = nil;
NSArray *uploadEntries = [manager getUploadEntries:&error];

// Specify file that you want to terminate
NSString *fileName = @"sample3.mp4";
NSString *path = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];

for (KiiUploader *uploader in uploadEntries) {
  if ([[uploader localPath] isEqualToString:path] {
    // Terminate uploading
    NSError *terminateError = nil
    [uploader terminate:&terminateError];
  }
}
```

Basically, just invoke `terminate` method. This will terminate the target file upload unless the upload is already finished.

##Uploading a File without resumable transfer
You can upload a file without resumable feature. (We recommend to use the upload with resumable feature, especially when you are uploading a big file to Kii Cloud).

Check the following snippet to see how you can do this.

```objc
NSError *error;

// Create bucket
KiiFileBucket *bucket = [[KiiUser currentUser] fileBucketWithName:@"my_private"];

// Get a local filepath to upload
NSString *localPath = [[NSBundle mainBundle] resourcePath];
localPath = [localPath stringByAppendingPathComponent:@"sample.txt"];

// Create a KiiFile using the local filepath
KiiFile *file = [bucket fileWithLocalPath:localPath];

// Save the file metadata + body to the server
[file saveFileSynchronous:&error];

if (error != nil) {
  // Saving file failed
  // Please check error description/code to see what went wrong...
}
```

Here is what is taking place in the snippet:

* Create a reference to the target file ("sample_upload.png").
* Create a `KiiFile` instance by invoking `fileWithLocalPath` method.
* Invoke `saveFile` method to upload the file to Kii Cloud.
