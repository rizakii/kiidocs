---
layout: en-doc
title: Scoping Objects
sort-priority: 70
summary: 'All objects have a "scope". This scope determines the default access control applied to the object upon its creation. For example, an object created in an "Application Scope" bucket will have "Application Scope"'
page-id: ios-scoping_objects-en
old-url: /en/object-scopes
---
## Object Scopes and Default Access Control

For each scope, the following default access control is applied to objects:

* **Application Scope**
    * Authenticated users (i.e., all users who have been signed-in) can read
      and write the object by default
    * Anonymous users (i.e., users who have not yet signed-in) can only read
      the object by default

* **Group Scope**
    * All group members can read and write the object by default
    * All non-group members cannot read or write the object by default

* **User Scope**
    * The user can read and write the object by default
    * Others cannot read or write the object by default

## Set a new ACL on an Object

New access permission can be applied to an object by adding a new ACL.
The possible access controls that can be granted on an object are:

* **KiiACLObjectActionRead**: Allowing to read the object.
* **KiiACLObjectActionWrite**: Allowing to modify and delete the object.

Here is a sample snippet for granting KiiACLObjectActionRead permission to
anonymous users.

```objc
KiiObject *object = [KiiObject objectWithURI:@"_URI_OF_THE_OBJECT_"];
NSError *error;
NSArray *succeeded, *failed;

// Create an acl object to hold our rules
KiiACL *acl = [object objectACL];

// Create a rule
KiiACLEntry *entry = [KiiACLEntry entryWithSubject:[KiiAnonymousUser aclSubject] andAction:KiiACLObjectActionRead];

// Put the rule in the holder
[acl putACLEntry:entry];

// Save the acl to the object
[acl saveSynchronous:&error
          didSucceed:&succeeded
             didFail:&failed];

if(error != nil) {
  // Updating at least 1 ACLEntry failed
  // Please check error description and succeeded/failed arrays to see what went wrong...
}
```
