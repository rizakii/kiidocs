---
layout: en-doc
title: Analyze Event Data
sort-priority: 20
summary: 
---
Here are four steps for analyzing Event Data.

1. Define metrics
1. Send Event Data from an application
1. Check analytics results on the dev portal

We will pick up the following sample scenario throughout this page for
describing how to get started with analyzing Event Data:

* The application is to send an event data with the following fields upon the
  installation.  
  This Event Data is named "MyUser":
    * **"gender"** ... String (M or F)
    * **"city"** ... String (San Francisco, Dallas, New York, ...)
    * **"location"** ... String (UK, EU, JP, ...)
    * **"children"** ... Int (0, 1,2,3, ...)
    * **"age"** ... Int (18, 20, 42, 44, ...)

* Based on these event data, we want to check the following metrics:
    * **Metric #1**: Average of **"age"** sliced by **"city", "location",
      "gender"** and **"children"**
    * **Metric #2**: Count of users (i.e., count of event data) sliced by
      **"gender", "city", "location", "children"** and **"age"**

## 1. Define Metrics

We define our metrics on the dev portal in the following steps.

1. On the dev portal, click "Metrics" icon and then select "Config".
1. Click "Add" button.
    ![](01.png)

    This will bring up a metric definition screen as shown below.

    ![](02.png)
1. Put a name of the metric in "Name" section.
1. Toggle "External" at "Data" section so as to select Event RawData.
1. Define the value to be aggregated in "Aggregated using" section by
   specifying the following info.
    * **Aggregation function**: how to aggregate the fact.  
        The available functions are: **Count**, **Avg** (Average), **Sum**,
        **Min**, and **Max**.
    * **Field name**: which field is to be aggregated as a "fact".  
        We can specify "*" for the aggregation function "Count".
    * **Data type**: what data type the field value has.  
        The available types are: int, float, boolean or string.

    <p class="note">Currently, we do not support multi-byte characters; if you specify a field having either multi-byte field name or field value, you will not get the expected result.</p>

1. Specify the name of the event data in "Filter by Type" section; if none is
   specified, all event data will be used for creating the metrics.
1. Define how the aggregates are to be sliced and diced (as dimensions) in
   "Dimensions" section by specifying the following info:
    * **Label**: how this dimension should be labeled in the analytics results.
      This is an optional; if omitted, the original field name will be used as
      the label.
    * **Name**: which field is to be aggregated as a "dimension".  The name
      should be 1-6 bytes in length, should start with an alphabet, and may
      contain alphanumeric and underscore(\_).
    * **Type**: what data type the field value has.  
        The available types are: int, float, boolean and string.

    For example, please check the following example to see how we define our
    sample Metric #1.

    ![](03.png)

    Next example shows how we define our sample Metric #2. Note that in this
    case, we are specifying "*" for the aggregation target field name.  We can
    do this when we are specifying "count" as the aggregation function (i.e.,
    count a number of all Event Data sent to Kii Cloud).

    ![](04.png)

1. Click "Save" button.  The metrics will be saved but not activated yet.

    Now click "Config" icon.

    ![](05.png)

1. The Aggregation Rules screen pops up.  Click "Activate".

    ![](06.png)

1. The metrics will be activated and the indicator will turn green.

    ![](07.png)

    Note that the aggregation rule ID is now shown. We will use this ID when we
    later fetch the analytic results.


## 2. Send Event RawData from your application

Here is an example of how you can upload an Event RawData.

1. Create a KiiEvent instance by invoking `event` method while specifying an
   "event type". This event type can be any string like "installed" or "level
   up" as the event type.  In our example, we are using "MyUser".
1. Set arbitrary key-value pairs in the instance with `set` method. In our
   example, we will set key-values such as "gender", "city", "location",
   "children" and "age".
1. Invoke `push` method to cache the event data. It will be automatically
   uploaded to Kii Cloud in an optimal interval.

```objc
 // Initialize KiiAnalytics with AppID/AppKey
[KiiAnalytics beginWithID:APP_ID andKey:APP_KEY];

// Define event type.
NSString *eventType = @"MyUser";

// Set arbitrary key-value pairs
NSMutableDictionary* extras = [NSMutableDictionary dictionary];
[extras setObject:@"M" forKey:@"gender"];
[extras setObject:@"San Francisco" forKey:@"city"]
[extras setObject:@"US" forKey:@"location"];
[extras setObject:[NSNumber numberWithInt:2] forKey:@"children"];
[extras setObject:[NSNumber numberWithInt:35] forKey:@"age"];

// Upload Event RawData to Kii Cloud
BOOL success = [KiiAnalytics trackEvent:eventType withExtras:extras];
if (!success) {
  // There was something wrong with trackEvent.
}
```


## 3. Check Analytics Results on Dev Portal

Follow the steps below to view metrics on the dev portal.

1. On the dev portal, click "Metrics" icon and then select "Metrics".
1. Select the name of the metrics.

    This will bring the default view.

    ![](08.png)

    Note that the dimensions are shown just below a list of the metrics.  
    Clicking on a dimension will give a sliced view.  For instance, here is a
    snapshot of the sliced view by selecting "Location" dimension.

    ![](09.png)

    There are two ways to further drill down the results:

    1. We can toggle on/off items by clicking row(s) on the table. In the next
       sample, the top-3 items ("UK", "IN", and "US") are toggled off.
       
        ![](10.png)

    1. We can set an additional filter using different dimension. To do this,
       click "Filters" button and open a pull-down menu to select the filter.
    
        In the next example, we are selecting the dimension "age" with the
        value "22".

        ![](11.png)

## Fetch Analytics Results using iOS SDK

We can extract the analytics results via Android SDK.  To do so, we need to specify the following information:

* Dimension/Grouping Key (which field?).  If omitted, the default view will be used.
* Filters (if any).  When multiple filters are defined, they will be concatenated by "AND".
* Date range.

We also need to specify the corresponding Aggregation Rule ID that will be shown on the dev portal when we define the metrics.  Please check the following sample snippet.

```obj-c
// Create analytics result filter
KAFilter *filter = [[[KAFilter alloc] init] autorelease];
[filter addFilter:@"location" 
        withValue:@"UK"];

// Set date range
NSDate *start = [NSDate dateWithTimeIntervalSinceNow:-1*60*60*24*7]; // One week ago
NSDate *end = [NSDate date]; // Now
KADateRange *range = [KADateRange rangeWithStart:start
                                          andEnd:end];

// Create query
KAResultQuery *query = [[[KAResultQuery alloc] init] autorelease];
// Set grouping key to query
[query setGroupingKey:@"gender"];
// Set filter to query
[query setFilter:filter];
// Set date range to query
[query setDateRange:range];

// AggregationID
NSString *aggregationID = @"22";

// Retrieve result
[KiiAnalytics getResultWithID:aggregationID
                     andQuery:query
                     andBlock:^(KAGroupedResult *results, NSError *error) {
  if(error != nil) {
    NSLog(@"Error getting results");
  }
}];
```

The analytics results will be a list of GroupedSnapShots.  Each GroupedSnapShot has the following properties:

* Name : Name of the key specified on group-by.
* Data : JSON Array that contains data array grouped-by.
* PointStart : Started time of aggregation procedure.
* PointInterval : Interval of aggregation procedure.

Please check our [Appledoc]({% page_url references-en %}) for more details on how to interpret GroupSnapShot.