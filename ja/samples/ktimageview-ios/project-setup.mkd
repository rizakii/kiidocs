---
layout: ja-doc
title: 実装方法
sort-priority: 20
page-id: ios-tutorial_image_view_project_setup-ja
---
このチュートリアルでは、以下を実装したサンプルアプリを作成します。

1. アプリを使ってユーザ登録および認証を行う。
2. ランダムな画像を生成の上、これを Kii Cloud にアップロードする。
3. 画像をダウンロードし、KTImageView を使ってこれを素早く表示する。

このチュートリアル用のプロジェクトをまだダウンロードしていない場合は、[こちら](http://blog.kii.com/downloads/KTImageView/KTImageViewSample-Stubbed.zip) よりダウンロードしてください。なお、KTImageView 以外の部分については既にコーディングが完了した状態になっています。

## ユーザ認証

今回のアプリにおいては、画像のアップロードに先立ちユーザはログインする必要があります。この機能は、KiiToolkit の別のモジュールを使って実現します ({% page_link ios-tutorial_login_view_controller-ja %})。

このモジュールは次のように動作します。ビューコントローラが表示された際にまだ認証済ユーザが存在しない場合、モジュールは登録・認証画面を表示します。あとは {% page_link ios-tutorial_login_view_controller-ja %} が面倒を見てくれます。

ユーザのログインが完了したら、次は画像のアップロードです...


## 画像のアップロード

プロジェクトには、以下の様なビューを表示する `UploadViewController` というビューコントローラが同封されています。

<p align="center"><img src="01.png" alt="" style="border:0;" /></p>

"Generate New Image" ボタンをタップすると、`generateNewImage:` メソッドが呼び出されます。このメソッドはラベルのバックグラウンドカラーをランダムに変更し、現在の日時をテキストとして埋め込みます。この機能は、容易に大量のランダム画像を動的に生成するお手伝いをします。

次に、"Upload New Image" をタップすると、生成されたビューが BLOB 型の画像データに変換され、`uploadNewImage:` メソッドが呼び出されます。これにより、画像が生成され、これがユーザの File Bucket にアップロードされます。

プロジェクト内のコードはシンプルにまとめられており、必要となるエラー処理など必要な処理をすべて含んだ形になっています。


## 画像のダウンロード

次に、KTImageView を使って画像をダウンロードし、 UI 上に綺麗に表示する方法を説明します。ここでは、ボタン押下を契機に Kii Cloud より画像一覧リストを取得し、この中より2つをランダムにピックアップの上 KTImageView に表示するシンプルな方法を採用します。

始めに `DownloadViewController.xib` ファイルを開きましょう。既にビューが作成されていますが、正しく動作させるにはいくつか調整が必要です。

画面中央の UIImageView をクリックし、Identity Inspector に移動してください。クラス名が UIImageView になっていますが、今回は KTImageView を使用したいので 'Custom Class' セクション内のクラスを KTImageView に変更します。

<p align="center"><img src="02.png" alt="" style="border:0;" /></p>

変更が終わったら、以下に示すように firstImageView アウトレットを KTImageView と紐付けします。

<p align="center"><img src="03.png" alt="" style="border:0;" /></p>

これで UI の準備は完了です。

コード内部に移りましょう。`DownloadViewController.m` ファイルを開いてください。

表示する2つの画像のうち、1つ分については既に UI インタフェースを使って作成済です。ここでは、コードを直接編集してもう1つ分を追加しましょう。

追加方法は非常に簡単です。UIImageView と同様に、新たな KTImageView オブジェクトを作成してください。


```objc
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        self.title = @"Download";
        
        /* ADD THIS CODE */
        _secondImageView = [[KTImageView alloc] initWithFrame:CGRectMake(20, 178, 280, 150)];
        [self.view addSubview:_secondImageView];
        /* END ADD */
        
    }
    return self;
}
```

'download' ボタンがクリックされた場合のロジックも既にコーディングされています。
以下に、処理の流れを簡単にまとめます。

1. 現在の UI から画面をクリア。
2. サーバより画像一覧リストを取得。
3. 表示すべき画像がある場合はこれを表示する。
4. 画像がない場合は、適切なエラーを表示する。

画像の表示を行うに `showImages:` メソッドを実装しましょう。ここでは、クエリ結果として返ってきた KiiFile の1つないしは2つを KTImageView に渡して表示を行なっています。

```objc
- (void) showImages:(NSArray*)results
{
    
    // mix up the results so we get random-ish images each time
    NSMutableArray *shuffledResults = [NSMutableArray arrayWithArray:results];
    [shuffledResults shuffle];

    if(shuffledResults.count > 0) {
        
        // get the file object from the list
        KiiFile *file1 = [shuffledResults objectAtIndex:0];
        
        // attach the file to the KTImageView
        [_firstImageView setImageFile:file1];
        
        // start loading the image
        [_firstImageView show];
    }
    
    if(shuffledResults.count > 1) {
        
        // get the file object from the list
        KiiFile *file2 = [shuffledResults objectAtIndex:1];

        // attach the file to the KTImageView
        [_secondImageView setImageFile:file2];

        // start loading the image
        [_secondImageView show];
    }
}
```

上記のコードを追加するだけでビューへの KiiFile のローディングは完了です。実際にビルドを行い、正しく画像が表示されることを確認してみてください。より多くの画像をアップロードするほど、ダウンロードタブに表示される画像のバリエーションが増えるはずです。

<p align="center"><img src="04.png" alt="" style="border:0;" /></p>

----

次は: {% page_link ios-tutorial_image_view_finishing_up-ja %} &gt;&gt;
