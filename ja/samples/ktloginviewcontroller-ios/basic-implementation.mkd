---
layout: ja-doc
title: 基本的な実装方法
summary: <p>今回我々が使用するサンプルアプリは、ユーザがアカウントを登録済であることを前提としています。そこで、メインビューコントローラが起動しユーザがログイン<em>していない</em>場合、ログインスクリーンを表示しなければなりません。ここでは、KTLoginViewController を用いてログインスクリーンを表示する方法について説明します。</p>
sort-priority: 20
page-id: ios-tutorial_login_view_controller_basic_impl-ja
---
ログインスクリーン表示は、次のようにViewController.m の the `viewDidAppear:` を用いて行います。

```objc
- (void) viewDidAppear:(BOOL)animated
{
    // if there is no user logged in
    if(![KiiUser loggedIn]) {
        // show the login view
        [self showLoginView];
    }
}
```

次に、以下のように ViewController.m の `showLoginView` メソッドを実装します。

```objc
@implementation ViewController

- (void) showLoginView
{
    KTLoginViewController *loginView = [[KTLoginViewController alloc] init];
    [self presentViewController:loginView animated:TRUE completion:nil];
}

- (void) viewDidAppear:(BOOL) animated
{
...
```

`KTLoginViewController` 表示のために必要なコードは以上です。実際にビルド＆実行してみてください。ユーザ登録および認証が既に行える状態になっているはずです。

<img src="01.png" alt="" style="border:0; margin:30px;" />

基本的な実装は以上です。ただし、恐らくこのままでは使い物にはならないでしょう。例えば、Kii と大きく表示されている今の画面は恐らく都合が悪いでしょう。また、画面のデザインも、あなたのアプリにあわせてカスタマイズ剃る必要があるでしょう。

<p class="center">
しかし大丈夫。このビューは全面的にカスタマイズ可能です!
</p>

----

次は: {% page_link ios-tutorial_login_view_controller_customization-ja %} &gt;&gt;
