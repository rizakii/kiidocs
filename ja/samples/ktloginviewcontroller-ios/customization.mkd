---
layout: ja-doc
title: カスタマイズ
summary: 'ビューコントローラクラスのプロパティを設定することにより、全ての UI エレメントを容易に操作することができます。ここでは、画像や色を変更し、ビューをよりあなたのアプリ寄りに変更する方法について説明します'
sort-priority: 30
page-id: ios-tutorial_login_view_controller_customization-ja
---
`showLoginView` メソッドをもう一度見てみましょう。以下のようになっているはずです。

```objc
@implementation ViewController

- (void) showLoginView
{
    // create the login view
    KTLoginViewController *loginView = [[KTLoginViewController alloc] init];

    // get the registration view
    KTRegistrationViewController *registrationView = loginView.registrationView;

    // and the forgot password view
    KTForgotPasswordViewController *forgotView = loginView.forgotPasswordView;

    // we want to ask the user for an email address and a username
    registrationView.displayFields = KTRegistrationFieldEmailAddress | KTRegistrationFieldLoginName;

    // update our title images
    loginView.titleImage.image = [UIImage imageNamed:@"title"];
    registrationView.titleImage.image = [UIImage imageNamed:@"title"];
    forgotView.titleImage.image = [UIImage imageNamed:@"title"];

    // update our background images
    loginView.backgroundImage.image = [UIImage imageNamed:@"bg"];
    registrationView.backgroundImage.image = [UIImage imageNamed:@"bg"];
    forgotView.backgroundImage.image = [UIImage imageNamed:@"bg"];

    // update the buttons
    [loginView.loginButton setGradientColors:[UIColor colorWithHex:@"8e8e8e"], [UIColor colorWithHex:@"4c4c4c"], nil];
    [loginView.registerButton setGradientColors:[UIColor colorWithHex:@"004614"], [UIColor colorWithHex:@"012700"], nil];
    [loginView.forgotButton setBackgroundColor:[UIColor colorWithWhite:0.0f alpha:0.3f]];
    [registrationView.registerButton setGradientColors:[UIColor colorWithHex:@"8e8e8e"], [UIColor colorWithHex:@"4c4c4c"], nil];
    [forgotView.sendResetButton setGradientColors:[UIColor colorWithHex:@"8e8e8e"], [UIColor colorWithHex:@"4c4c4c"], nil];

    loginView.loginButton.borderColor = [UIColor blackColor];
    loginView.registerButton.borderColor = [UIColor blackColor];
    registrationView.registerButton.borderColor = [UIColor blackColor];
    forgotView.sendResetButton.borderColor = [UIColor blackColor];

    // show the view
    [self presentViewController:loginView animated:TRUE completion:nil];
}

- (void) viewDidAppear:(BOOL) animated
{
...
```

長いコードですので、一つずつ見て行きましょう。


```objc
// get the registration view
KTRegistrationViewController *registrationView = loginView.registrationView;

// and the forgot password view
KTForgotPasswordViewController *forgotView = loginView.forgotPasswordView;
```

このツールは、ユーザ登録用のビューとパスワードリセット用のビューを提供していることを思い出してください。ビューのカスタマイズを行う際には、全てのビューをカスタマイズ剃る必要があります。上に示したコードは、このカスタマイズを容易に行うための変数を提供しています。

```objc
// we want to ask the user for an email address and a username
registrationView.displayFields = KTRegistrationFieldEmailAddress | KTRegistrationFieldLoginName;
```

標準的なユーザ登録のビューは、ユーザに対してユーザ名とパスワードの入力を要求します。上のコードは、ユーザに対してどのフィールドを要求するのかを指定しています。上の例では、ユーザのメールアドレスとユーザ名を要求しています。

```objc
// update our title images
loginView.titleImage.image = [UIImage imageNamed:@"title"];
registrationView.titleImage.image = [UIImage imageNamed:@"title"];
forgotView.titleImage.image = [UIImage imageNamed:@"title"];
```

このコードは、KTLoginViewController が管理するビューにおいて利用されるロゴを指定しています。上の例では、サンプルプロジェクトに含まれている 'title.png' リソースが指定されており、この結果としてサンプルアプリは 'Kiistagram' というタイトルを表示しています。

```objc
// update our background images
loginView.backgroundImage.image = [UIImage imageNamed:@"bg"];
registrationView.backgroundImage.image = [UIImage imageNamed:@"bg"];
forgotView.backgroundImage.image = [UIImage imageNamed:@"bg"];
```

このコードは、バックグラウンド画像として 'bg.png' を指定しています。適切な画像を指定することで、アプリ全体としての統一感を出すようにしています。

```objc
// update the buttons
[loginView.loginButton setGradientColors:[UIColor colorWithHex:@"8e8e8e"], [UIColor colorWithHex:@"4c4c4c"], nil];
[loginView.registerButton setGradientColors:[UIColor colorWithHex:@"004614"], [UIColor colorWithHex:@"012700"], nil];
[loginView.forgotButton setBackgroundColor:[UIColor colorWithWhite:0.0f alpha:0.3f]];
[registrationView.registerButton setGradientColors:[UIColor colorWithHex:@"8e8e8e"], [UIColor colorWithHex:@"4c4c4c"], nil];
[forgotView.sendResetButton setGradientColors:[UIColor colorWithHex:@"8e8e8e"], [UIColor colorWithHex:@"4c4c4c"], nil];

loginView.loginButton.borderColor = [UIColor blackColor];
loginView.registerButton.borderColor = [UIColor blackColor];
registrationView.registerButton.borderColor = [UIColor blackColor];
forgotView.sendResetButton.borderColor = [UIColor blackColor];
```

最後に、アプリ全体の統一感を出すためにボタンの色を調整します。上の例では、画像リソースなしにグラデーション付きボタンを提供する KTButtons ([KiiToolkit に同封](https://github.com/KiiPlatform/KiiToolkit-iOS/wiki/KTUI#wiki-ktbutton)) を利用しています。これにより、カラースキームを指定するだけで、ボタンが自動的に作成されています。

カスタマイズは以上です。実際にアプリをビルドして実行し、新たなデザインが適用されることを確認してください。

<img src="01.png" alt="" style="border:0; margin:30px;" />
----

次は: {% page_link ios-tutorial_login_view_controller_finshing_up-ja %} &gt;&gt;
