---
layout: ja-doc
title: メッセージを送信する
summary: トピックの作成が完了したら、いよいよプッシュメッセージの送信です。トピックにメッセージを送信すると、このトピックを購読している全てのユーザに対してメッセージがプッシュされます。ここでは、サンプルシナリオのそれぞれを例に取り、メッセージ送信の方法を説明していきます。
sort-priority: 30
page-id: android-sending_push_to_user_messages-ja
old-url: /jp/--298
---
## シナリオ#1: 全アプリユーザへの一斉送信

Application scope トピックへのメッセージ送信は、アプリ開発者のみ行うことができ
ます。実際には、開発者ポータルにて以下の手順を実施してメッセージ送信を行いま
す。

1. 開発者ポータルにログイン。
2. 対象アプリケーションを選択後、"Notification" アイコンをクリックし、さらに
   "New Message" ボタンをクリック。これにより、プッシュメッセージ送信 UI が表示
   されます。

    ![](01.png)

3.  以下の情報を入力し、送信するプッシュメッセージを指定します。
    1.  メッセージ送信先に関する情報

        まずは、プッシュメッセージ通知先を指定します。

        ![](02.png)
        * "Send To:" セクションにて "Topic" を選択。
        * "Topic Name" フォームに、送信先トピック名を入力。
        * 適当な環境（Developer, Production, Both）を選択。

    2.  メッセージの内容に関する情報

        次に、メッセージの内容を指定します。

        ![](03.png)
        * "Include" セクションにて、メッセージに含める既定フィールドを指定しま
          す。

            それぞれの規定フィールドを有効にした場合にメッセージに追加される値
            は以下の通りです。
            * App ID: アプリケーションの AppID
            * Sender: Client ID
            * When: プッシュメッセージ送信時のタイムスタンプ
            * Origin: "Push to Users" メッセージであることを示す"EXPLICIT" とい
              う値
            * Object Scope: アプリケーションスコープのトピックに送信されたメッ
              セージであることを示す "APP" という値
            * Topic ID: 対象トピックのTopic ID
        * メッセージに含める任意フィールド（key-value ペア）を指定します。
            * "+" ボタンを押すと、さらにフィールドを追加できます。
            * "Droid" と "Apple" アイコンを押すと、それぞれのフィールドの送信先
              が制御できます（Android 端末のみに送信、iOS 端末のみに送信等）。

    3.  APNS/GCM の詳細設定

        最後に、必要に応じて APNS/GCM の詳細設定を行います。

        ![](04.png)
        * GCM/APNS の詳細設定を行う場合は、トグルボタンを有効にします。
            *   GCM 詳細設定の各項目については、
                [Google による解説](http://developer.android.com/google/gcm/gcm.html#server)
                を参照してください。
            *   APNS 詳細設定の各項目については、
                [Apple による解説](http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ApplePushService/ApplePushService.html)
                を参照してください。

                なお、バックグラウンドで起動されているアプリにプッシュメッセー
                ジを送信するためには、こちらの Alert 関連情報を設定する必要があ
                ります。

4. 設定が完了したら "Send..." ボタンを押下しすると、対象トピックにメッセージが
   送信されます。


## シナリオ#2: グループメッセージング<BR />シナリオ#3: TODO リストを全てのデバイスにプッシュ

Group scope トピックには、任意のグループメンバーがメッセージを送ることができま
す（シナリオ#2）。

以下に、メッセージ送信を行うコード例をあげます。

```java
// Assume that the current user is a group member.
try {
  Data data = new Data();
  data.put("str", "str");
  data.put("int", 1);
  data.put("bool", false);
  data.put("double", 1.12);
  KiiPushMessage message = KiiPushMessage.buildWith(data).build();
  topic.sendMessage(message);
} catch (IOException ioe) {
  // Sending a message failed.
} catch (AppException e){
  // Sending a message failed.
}
```

User scope トピックの場合は、このトピックの owner のみがメッセージを送信できます（シナリオ#3）。

以下に、メッセージ送信を行うコード例をあげます。

```java
try{
  // Instantiate a user-scope topic.
  KiiUser user = KiiUser.getCurrentUser();
  String topicName = "MyTODO";
  KiiTopic topic = user.topic(topicName);

  // Build a push message.
  Data data = new Data();
  data.put("Item", "Do something");
  data.put("Done", 0);
  KiiPushMessage message = KiiPushMessage.buildWith(data).build();

  // Send the push message.
  topic.sendMessage(message);
} catch (IOException ioe ) {
  // failed.
} catch (AppExceptioin e) {
  // failed.
}
```

いずれの例についても、以下の処理をしています。

* メッセージに含める key-value ペアを定義した後、 `buildWith` メソッドを実行し
  プッシュメッセージを作成。
* `sendMessage` メソッドを実行し、メッセージを送信。


### APNS/GCM に特有のフィールドを設定する

APNS および GCM に特有のフィールド値をプッシュメッセージに設定する方法を以下に示します。

```java
// Assume group/user scope topic is created.
Data data = new Data();
data.put("your_keys", "your_values");

// Put GCM specific values.
GCMMessage gcm = GCMMessage.builder()
        .withCollapseKey("CollapseKey")
        .withRestrictedPackageName("your.package.name")
        .withTimeToLive(10)
        .build();

// Put APNS specific values.
APNSMessage apns = APNSMessage.builder()
        .withBadge(10)
        .withSound("sound-file")
        .withAlertBody("alert message text")
        .withAlertLocKey("locKey")
        .withAlertActionLocKey("actionLocKey")
        .withAlertLocArgs(new String[] { "loc-args" })
        .withAlertLaunchImage("LaunchImage")
        .build();

// Send push message
KiiPushMessage message = KiiPushMessage.buildWith(data)
        .withGCMMessage(gcm)
        .withAPNSMessage(apns)
        .build();
try {        
    topic.sendMessage(message);
} catch (IOException goe) {
    // check fail cause
} catch (AppException e) {
    // check fail cause
}
```

* `GCMMessage` インスタンスを生成して GCM 特有のフィールドをセットします。
* `APNSMessage` インスタンスを生成して APNS 特有のフィールドをセットします。
* `KiiPushMessage` インスタンス生成時に、用意した `GCMMessage` と `APNSMessage` インスタンスを指定します。

プッシュメッセージはデフォルトで全てのデバイス（Android と iOS の双方）に送信されます。次の例に示すように、`KiiPushMessage` インスタンス生成時にフラグを設定することによりプッシュメッセージの送信先を制御することができます。

```java
// Deliver the push message to Android devices only
KiiPushMessage message = KiiPushMessage.buildWith(data)
        .withGCMMessage(gcm)
        .enableAPNS(false)
        .build();

// Deliver the push message to iOS devices only
KiiPushMessage message = KiiPushMessage.buildWith(data)
        .withAPNSMessage(apns)
        .enableGCM(false)
        .build();

```