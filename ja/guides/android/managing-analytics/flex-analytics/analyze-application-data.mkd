---
layout: ja-doc
title: アプリデータの解析
summary: アプリデータ（App Data）の解析を行う基本的なステップは以下の通りです。
sort-priority: 10
---
1.  メトリクスを定義する
1.  開発者ポータルで解析結果を確認する
1.  （必要に応じて）Android SDK を用いて解析結果詳細を取得する

以後、以下のサンプルシナリオを例に取り、実際に App Data の解析を行う手順を解説
していきます。

*  ゲームアプリにおいて、ユーザのハイスコア保存用に次のような Object を利用している。

    `{ "Score" : 100,  "Level" : "Easy" , "AppVersion" : 1 }`

    *  キー "**Score**" は、ユーザのスコアを整数値として保存
    *  キー "**Level**" は、ユーザのレベル（"Easy", "Normal", "Hard"）を文字列
       として保存
    *  キー "**AppVersion**" は、アプリのバージョン（1, 2, 3, ...）を整数値とし
       て保存
*  ユーザのゲームプレイ状況把握のために、このハイスコアデータを以下のメトリクス
   を用いて解析を行いたい。
    *  **メトリクス#1** **"Score"**の平均値を、**"Level"**と**"AppVersion"**毎
       に評価
    *  **メトリクス#2** データ総数 (i.e., アップロードされたハイスコアデータの
       総数）を、**"Score"**,**"Level"** および **"AppVersion"** 毎に評価

## 1. メトリクスを定義する

開発者ポータルで以下の手順を実施します。

1. 開発者ポータルより、対象アプリを選択します。
1. "Metrics" アイコンをクリックします。
1. "Config" を選択し、"Add" ボタンを押下します。
    ![](01.png)

    以上の手順により、Aggregation Rules 定義画面が表示されます。

    ![](02.png)

1. "App Data" を選択
1. "Select a conversion rule" を押下

    Conversion Rules の一覧画面が表示されます。  
    （下記のスクリーンショットではまだ何も Conversion Rule が定義されていないた
    めブランクになっています）

    ![](03.png)

1. "+" ボタンをクリックし、Conversion Rules 定義画面を開きます。
1. アプリデータの解釈方法（Conversion Rule）を定義します。以下の情報を入力して
   ください。
    * **NAME** : Conversion Rule の名前
    * **BUCKET NAME、SCOPE**: 解析対象データが保存されている Bucket の名前とス
      コープ
    * **COLUMNS** : 解析対象となるデータフィールド。各コラムは、以下の３つの項
      目により定義されます。
        * **Name** : フィールドにつける名前
        * **Source** : アプリデータにおけるフィールド名
        * **Type** : フィールド値のタイプ (int, string, float, boolean).

            <p class="note">現バージョンにおいては、マルチバイト文字はサポートされません。マルチバイト文字を含むフィールド名やマルチバイト値を持つフィールドを指定した場合、期待通りの結果が表示されないことがあります。</p>

            一例として、我々のサンプルシナリオの場合は次のように conversion
            rule を定義します。
            ![](04.png)
    * Conversion rule の名前は "High Score Tracking"
    * App scope の "score" という Bucket を解析対象 Bucket として指定
    * 以下のカラムを定義：
        * int 型の値を保持するデータフィールド "Score" に対して、"UserScope" と
          いう名前をセット
        * string 型の値を保持するデータフィールド "Level" に対して、"UserLevel"
          という名前をセット
        * int 型の値を保持するデータフィールド "AppVersion" に対し
          て、"AppVersion" という名前をセット

    設定が完了したら "Save" を押下してください。

1. 今定義した conversion rule が、Conversion Rule 一覧に新たに表示されているこ
   とを確認します。
    ![](05.png)

    この conversion rule をクリックします。
1. Aggregation Rules 定義画面に戻ります。先ほどクリックした conversion rule が
   反映されていることを確認してください

    Aggregation rule の残りの部分を設定します。
    * **"Aggregate using"**  セクションに、以下の情報を記入します。
        * **Aggregation function:** ファクトをどう集計するか。選択可能な関数は
          **Count**, **Avg** (Average), **Sum**, **Min**, **Max** のいずれかで
          す。
        * **Column:**  どのカラムをファクトとして集計するか。
    * **"Dimensions"**  セクションに表示されているボタンより、ディメンションと
      して使用するものをクリックして有効にします。

    一例として、我々のサンプルシナリオにおけるメトリクス＃１は次のように設定し
    ます。

    ![](06.png)

    同様にメトリクス＃２は次のように定義します。

    ![](07.png)

    設定が完了したら "Save" ボタンを押下します。
1. 今設定した Aggregation Rule が表示されることを確認します。ただし、この段階で
   はルールはまだ有効になっていません。
    ![](08.png)

    "Config" ボタンを押下します。
1. Aggregation Rule 設定画面が表示されます。
    ![](09.png)

    "Activate" をクリックし、インジケーターが緑色に変わるのを確認します。

    ![](10.png)

これで設定した Aggregation Rule が有効になりました。Aggregation Rule ID が表示
されていることを確認してください。この ID は、後ほど Android SDK 経由で解析結果
の詳細を取得する際に利用します。

## 2. 開発者ポータルで解析結果を確認する

開発者ポータルにて、次の操作を行います。

1. "Metrics" アイコンをクリック後、"Metrics" を選択。
1. 対象メトリクスを選択。  
   （ここではメトリクス＃２ "Counting # of scores" を選択したものとして話を進め
   ます）

    以下のデフォルトビューが表示されます。

    ![](11.png)

    メトリクス名一覧のすぐ下に、ディメンションが表示されています。これらのうち１つをクリックすると、このディメンションにより分割されたビューが表示されます。

    一例として、ディメンション "UserScore" を選択した際のビューを以下にあげます。

    ![](12.png)

    解析結果をさらに絞り込む方法を次に示します。

    1. 左下に表示されているテーブルの行をクリックすることで、対象データのオン/
       オフができます。次の例では、"UserScore" の値が 80, 90, または 100 データ
       のみを残し、これ以外のデータをすべて無効化しています。
        ![](13.png)
    1. さらに別ディメンションを用いたフィルタをかけることもできます。"Filters"
       の下の "None" というボタンを押下し、表示されるプルダウンメニューより新た
       なフィルタを定義します。例えば、この手順で "AppVersion" の値が 5 である
       データに解析結果を絞り込む、などといったことが可能です。

        なお、開発者ポータルは、絞り込み結果を表示する際に解析のしやすいグラフ
        を表示します。

        一例として、我々のサンプルシナリオにおけるメトリクス＃２（"Tracking
        Average scores"）を表示した場合におけるグラフ表示の例を以下にあげます。
        この場合は、円グラフではなく棒グラフが表示されています。

        ![](14.png)

## 3. Android SDK を用いて解析結果詳細を取得する

Android SDK は、解析結果詳細を取得するための API を提供しています。

解析結果取得の際には、以下の情報を指定します。

* ディメンション（グルーピングキー）：どのディメンションで分割した結果を取得す
  るか？指定を省略した場合は、デフォルトビュー（分割なし）の結果を取得します。
* フィルター： 適用するフィルターを指定します。複数のフィルターが指定可能です。
  複数指定した場合は、指定内容を AND 結合したフィルタが適用されます。
* 取得対象データのレンジ。

さらに、開発者ポータルに表示されている Aggregation Rule ID を指定します。

以下に、Android Analytics SDK 経由で解析結果を取得するサンプル snippet をあげま
す。

```java
 // Define filters
Filter filter = new Filter();
filter.addFilter("AppVersion", "9");

// Define data range
SimpleDate start = new SimpleDate(2012, 10, 01);
SimpleDate end = new SimpleDate(2012, 10, 10);
DateRange dateRange = new DateRange(start, end);

// Build a query (while setting a dimension as "UserLevel")
ResultQuery query = ResultQuery.builderWithGroupingKey("UserLevel")
                               .withFilter(filter)
                               .withDateRange(dateRange)
                               .build();

try {
  // Get the snapshots
  GroupedResult result = KiiAnalytics.getResult("_Aggregation_Rule_ID_", query);
  // Check the snapshots
  List snapshots = result.getSnapShots();
} catch (KiiAnalyticsException) {
  //  Please check KiiAnalyticsException to see what went wrong
}
```

解析結果は GroupedSnapShot として返されます。各 GroupedSnapShot は、以下のプロ
パティにより構成されています。GroupSnapShot の解釈方法については
[Javadoc]({% page_url references-ja %})を参照してください。

