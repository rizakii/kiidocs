---
layout: ja-doc
title: Folder 同期の起動
sort-priority: 10
old-url: /jp/launching-folder-sync
---
## フォルダ同期の起動方法

フォルダ同期は `sync` メソッドを呼び出すだけで起動できます。なお、 `sync` メソッドはブロッキングAPI であるため、以下の例のように UI スレッドとは別のスレッドで必ず実行してください。

以下の例は、ユーザ名とパスワードでファイル同期を起動する例です。ここでは "/mnt/sdcard/SyncBox" というディレクトリをフォルダ同期の対象としています。

```java
import com.kii.cloud.filesync.KiiFS;
Context context; // android.content.Context

Thread syncThread = new Thread() {
    @public void run() {
        try {
            KiiFS.sync(
                context,
                new File("/mnt/sdcard/SyncBox"),
                "___username___",
                "___password___",
                null);
        } catch (SyncException) {
            // TODO: show error message to user.
        }
    }
}

// Start sync with a thread
syncThread.run();
```

ユーザ名ではなくメールアドレスや電話番号を使って同期を起動する場合は、以下の例のように `Account` クラスを利用してください。

### メールアドレスを利用：

```java
import com.kii.cloud.filesync.KiiFS; 
import com.kii.cloud.filesync.Account; 

Context context; // android.content.Context 

try { 
    KiiFS.sync( 
        context, 
        new File("/mnt/sdcard/SyncBox"), 
        Account.fromString("foobar@email.com", "password"), 
        null); 
} catch (Exception e) { 
    // TODO: show error message to user. 
}
```

### 国際電話番号を利用：

```java
import com.kii.cloud.filesync.KiiFS; 
import com.kii.cloud.filesync.Account; 

Context context; // android.content.Context 

try { 
    KiiFS.sync( 
        context, 
        new File("/mnt/sdcard/SyncBox"), 
        Account.fromString("+819012345678", "password"),
        null); 
} catch (Exception e) { 
    // TODO: show error message to user. 
}
```

### 国内電話番号を利用：

```java
import com.kii.cloud.filesync.KiiFS; 
import com.kii.cloud.filesync.Account; 

Context context; // android.content.Context 

try { 
    KiiFS.sync( 
        context, 
        new File("/mnt/sdcard/SyncBox"), 
        Account.fromLocalPhone("JP", "09012345678", "password"),
        null); 
} catch (Exception e) { 
    // TODO: show error message to user.
}
```

## 同期状況の取得方法

もしフォルダ同期の状況を取得・表示したい場合には、下記のように `ProgressCallback` を設定してください。

```java
import com.kii.cloud.filesync.KiiFS;
import com.kii.cloud.filesync.ProgressCallback;
import com.kii.cloud.filesync.ProgressInfo;

Context context; // android.content.Context

Thread syncThread = new Thread() {
    @public void run() {
        try {
            KiiFS.sync(
                    context,
                    new File("/mnt/sdcard/SyncBox"),
                    "___username___",
                    "___password___",
                    new ProgressCallback() {
                @Override
                public void onProgressUpdate(ProgressInfo value) {
                    // TODO: update the view of progress.
                }
            });
        } catch (Exception e) {
            // TODO: show error message to user.
        }
    }
}

// Start sync with a thread
syncThread.run();
```

このように `ProgressCallback` は `onProgressUpdate` をオーバーライドすることで設定できます。このコールバックは現在の同期状況を `ProgressInfo` の値で表します。

## ファイルの競合が発生した場合の動作

複数のデバイスでフォルダ同期を行った場合、ファイル名の競合が発生する可能性があります。  
例えば下記のような場合が考えられるでしょう。

 * 端末A："Alice.txt" という名前のファイルを "Bob.txt" という名前に変更
 * 端末B：新しく "Box.txt" という名前のファイルを作成

この場合、SDKでは自動的に片方のファイル名を "Box(1).txt" とし、両方のファイルを残すように処理します。

他にはファイル操作により競合が発生する可能性があります。  
例えば下記のような場合が考えられるでしょう。

 * 端末A："Alice.txt" というファイルを削除
 * 端末B："Alice.txt" というファイルを "Bob.txt" という名前に変更

この場合、SDKではユーザーのファイルを残す動作を優先します。そのため上記の場合では端末Bの変更を適用し、端末Aの変更は無視されます。



## 同期対象のフォルダを変更する方法

現時点の Kii Sync SDK では、設定可能な同期対象フォルダが1つのみとなっています。もし同期対象のフォルダを変更する場合は、 `reset` メソッドを呼び出してください。これによってAndroid 端末内に保存されている同期関連ファイルがリセットされ、新しいフォルダを同期対象として設定できるようになります。

```java
import com.kii.cloud.filesync.KiiFS;
Context context; // android.content.Context
try {
    KiiFS.reset()
} catch (Exception e) {
    // TODO: show error message to user.
} 
```
