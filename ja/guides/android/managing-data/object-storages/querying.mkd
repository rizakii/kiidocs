---
layout: ja-doc
title: Object の検索
summary: Kii Cloud 上の Object のうち、ある条件を満たすものを取得する方法として Kii Cloud SDK は検索機能を提供しています。この機能を用いると、例えば「ある Bucket より "count" フィールドの値が10より大きい Object を、フィールド値降順で最大で10個取得」などといった条件が指定可能です。
page-id: android-object_storages_querying-ja
sort-priority: 40
old-url: /jp/querying-for-objects--5
---
## KiiClause による Query の条件定義

アプリ開発者は以下の比較演算子を用いることでクエリの条件定義ができます。

 * **equals**
 * **notEquals**
 * **greaterThan**
 * **greaterThanOrEqual**
 * **lessThan**
 * **lessThanOrEqual**
 * **inWithIntValue**, **inWithLongValue**, **inWithDoubleValue**, **inWithStringValue**
 * **startsWith**

また、複数のクエリ条件を AND/OR 論理演算子を使用して結合することができます。

 * **and**
 * **or**

## KiiQuery の組み立て

KiiQuery インスタンスは、クエリ条件を指定した KiiClause インスタンスにより構成されます。KiiClause インスタンスなしに KiiQuery インスタンスを作成した場合は、対象 Bucket 内の全ての Object が検索結果としてマッチします（i.e., **all** 検索に相当）

KiiQuery インスタン作成後、さらにオプションとして以下のメソッドを用いてクエリ結果のソート順指定や、一度に受け取るクエリ結果の上限を設定することができます。

 * **sortByAsc**
 * **sortByDesc**
 * **setLimit**

sortByAsc, sortByDesc のどちらも指定されなかった場合、クエリ結果のソート順は不定となります。setLimit が指定されなかった場合、一度のクエリで受け取れる最大のアイテム数は200となります。


## KiiQueryResult の利用

クエリの結果は KiiQueryResult インスタンスで返却されます。 `getResult` メソッドをコールすることでクエリ結果を取得できます。

クエリ結果が複数のページにまたがる場合(例: `setLimit` で10を指定して、実際にクエリ条件にマッチする Object が30件あった場合)、 `getResult` で取得できる `KiiObject` のリストは最初のページのものになります。次のページを取得するには `getNextQueryResult` メソッドをコールた後、 `getResult` メソッドを再度コールします。

## Query のサンプルコード

まずは、もっとも単純な検索として Bucket 内の全ての Object を取得する例を考えます。

まず、`KiiQuery()` を何の KiiClause も指定せずに実行し、"all" クエリを作成します。このクエリを、検索対象 Bucket の `query` メソッドに渡して実行することで、Bucket 内の全ての Object を取得できます。
（別の方法として、 `query` メソッドをパラメータなしで実行してもOKです）

```java
KiiQuery all_query = new KiiQuery();

try {
  KiiQueryResult<KiiObject> result = Kii.bucket("myBucket").query(all_query);
  // Alternatively, you can also do:
  // KiiQueryResult<KiiObject> result = Kii.bucket("myBuckets").query();

  List<KiiObject> objLists = result.getResult();
  for (KiiObject obj : objLists) {
    // Do something with objects in the bucket
  }
} catch (IOException e) {
  // handle error
} catch (AppException e) {
  // handle error
}
```

次に、以下の条件でクエリを実行するサンプルをあげます。

 * KiiClause: "gender" 属性の値が "Female"、かつ "age" 属性の値が 18 より大きい
 * "age" 属性の昇順でクエリ結果をソート。
 * 一度のクエリ実行で取得する結果数の最大数を10件に設定。

`getNextQueryResult` で次の結果を取得するページネーションを実行。

```java
// Prepare the target bucket to be queried
KiiBucket bucket = Kii.bucket("myBucket");

// Define query conditions 
KiiQuery query = new KiiQuery(KiiClause.and(
    KiiClause.equals("gender", "Female"),
    KiiClause.greaterThan("age", 18)));

// Fine-tune your query results
query.sortByAsc("age");
query.setLimit(10);

// Query the bucket
try {
  KiiQueryResult<KiiObject> result = bucket.query(query);
  List<KiiObject> objLists = result.getResult();
  for (KiiObject obj : objLists) {
    // Do something with the first 10 objects
  }

  // Fetching the next 10 objects (pagination handling)
  if (result.hasNext()) {
    result = result.getNextQueryResult();
  }
  objLists = result.getResult();
  for (KiiObject obj : objLists) {
    // Do something with the next 10 objects
  }
} catch (IOException e) {
  // handle error
} catch (AppException e) {
  // handle error
}
```
