---
layout: ja-doc
title: File のスコープと ACL 設定
summary: File は常に User Scope を持ちます。
sort-priority: 70
page-id: android-scoping_files-ja
old-url: /jp/scoping-files--4
---
## 規定のアクセス制御

User Scope を持つファイルは、次にあげた規定のアクセス制御を持ちます。

 * **User Scope**
  * このユーザに対して、この File に対する読み取りと書き込みを許可します。
  * このユーザ以外に対して、この File に対する全アクセスを拒否します。

## File に新たな ACL を設定する

新しいACLを設定することで、File へ新しいアクセス制限を設定できます。設定できるアクセス制限は下記の通りです。

 * **READ\_EXISTING\_OBJECT**: File の読み取りを許可
 * **WRITE\_EXISTING\_OBJECT**: File への書き込みと削除を許可

下記はファイルに対して READ\_EXISTING\_OBJECT と WRITE\_EXISTING\_OBJECT を設定する例です。

```java
Uri frUri = Uri.parse("some existing user uri on cloud");
KiiUser friend1 = KiiUser.createByUri(frUri);
Uri uri = Uri.parse("some existing file uri on cloud");
KiiFile kFile = KiiFile.createByUri(uri);

KiiACL acl = kFile.acl();
// Set a new ACL (granting READ_EXISTING_OBJECT and WRITE_
// EXISTING_OBJECT permission to user Y) on a file owned by User X.
acl.putACLEntry(new KiiACLEntry(friend1,
            FileAction.WRITE_EXISTING_OBJECT, true));
acl.putACLEntry(new KiiACLEntry(friend1,
            FileAction.READ_EXISTING_OBJECT, true));

// Set a new ACL (granting READ_EXISTING_OBJECT and WRITE_
// EXISTING_OBJECT permission to all authenticated users) on a file
// owned by User X.
acl.putACLEntry(new KiiACLEntry(KiiAnyAuthenticatedUser.create(),
            FileAction.WRITE_EXISTING_OBJECT, true));
acl.putACLEntry(new KiiACLEntry(KiiAnyAuthenticatedUser.create(),
            FileAction.READ_EXISTING_OBJECT, true));

// Set a new ACL (granting READ_EXISTING_OBJECT and WRITE_
// EXISTING_OBJECT permission to anonymous users) on a file
// owned by User X.
acl.putACLEntry(new KiiACLEntry(KiiAnonymousUser.create(),
            FileAction.WRITE_EXISTING_OBJECT, true));
acl.putACLEntry(new KiiACLEntry(KiiAnonymousUser.create(),
            FileAction.READ_EXISTING_OBJECT, true));

try {
  acl.save();
} catch (ACLOperationException e) {
  // handle error.
}
```


