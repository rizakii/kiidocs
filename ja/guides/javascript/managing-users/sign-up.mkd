---
layout: ja-doc
title: サインアップ
sort-priority: 10
summary: アプリケーションのユーザ管理の第一歩は、ユーザ登録です。
old-url: /jp/sign-up--4
---
<p class="callout">ユーザ名とパスワードによるサインアップの代わりに、Facebook などの外部サービス経由でサインアップを行うことも可能です。詳細は「{% page_link javascript-social_network_integration-ja %}」を参照してください。</p>

Kii Platform は、ユーザ名とパスワードによるサインアップ機能を提供しています。さらに、メールアドレスや電話番号をサインアップ時に指定し、これらの情報をユーザに紐付けることができます。

メールアドレスや電話番号を指定した場合、Kii Cloud SDK に指定されたメールアドレスや電話番号の認証処理を行わせることもできます。認証を有効にした場合、メールアドレスや電話番号の認証が完了するまでこれらを用いたサインインは有効になりません。（この認証は、ユーザが他人のメールアドレス/電話番号でサインアップを行ったり、不正なメールアドレス/電話番号でサインアップを行うことを防止するための機能です）。

## サインアップ

ユーザ名とパスワードを使ったサインアップの例です。この例では、ユーザ名 "user\_123456"、パスワード "123ABC" で新規ユーザのサインアップを行なっています。

```javascript
var username = "user_123456";
var password = "123ABC";

// Create the KiiUser object
var user = KiiUser.userWithUsername(username, password);

// Register the user, defining callbacks for when the process completes
user.register({
  // Called on successful registration
  success: function(theUser) {
    // Print some info to the log
    console.log("User registered!");
    console.log(theUser);
  },
  // Called on a failed registration
  failure: function(theUser, errorString) {
    // Print some info to the log
    console.log("Error registering: " + errorString);
  }
});
```

次の例では、ユーザ名 "user\_123456"、メールアドレス "user\_123456@example\.com"、パスワード "123ABC" で新規ユーザのサインアップを行なっています。

```javascript
var username = "user_123456";
var emailAddress = "user_123456@example.com";
var password = "123ABC";

// Create the KiiUser object
var user = KiiUser.userWithEmailAddressAndUsername(emailAddress, username, password);

// Register the user, defining callbacks for when the process completes
user.register({
  // Called on successful registration
  success: function(theUser) {
    // Print some info to the log
    console.log("User registered!");
    console.log(theUser);
  },
  // Called on a failed registration
  failure: function(theUser, errorString) {
    // Print some info to the log
    console.log("Error registering: " + errorString);
  }
});
```

次の例では、ユーザ名 "user\_123456"、電話番号 "+819012345678"、パスワード "123ABC" で新規ユーザのサインアップを行なっています。

```javascript
var username = "user_123456";
var phoneNumber = "+819012345678";
var password = "123ABC";

// Create the KiiUser object
var user = KiiUser.userWithPhoneNumberAndUsername(phoneNumber, username, password);

// Register the user, defining callbacks for when the process completes
user.register({
  // Called on successful registration
  success: function(theUser) {
    // Print some info to the log
    console.log("User registered!");
    console.log(theUser);
  },
  // Called on a failed registration
  failure: function(theUser, errorString) {
    // Print some info to the log
    console.log("Error registering: " + errorString);
  }
});
```

次のように、ユーザ名を省略してアカウントを作成することもできます。

メールアドレスとパスワードの組でサインアップする例：

```javascript
 // Sign up with email/password, NO USERNAME
var emailAddress = "user_123456@example.com";
var password = "123ABC";

// Create the KiiUser object
var user = KiiUser.userWithEmailAddress(emailAddress, password);

// Register the user, defining callbacks for when the process completes
user.register({
  // Called on successful registration
  success: function(theUser) {
    // Print some info to the log
    console.log("User registered!");
    console.log(theUser);
  },
  // Called on a failed registration
  failure: function(theUser, errorString) {
    // Print some info to the log
    console.log("Error registering: " + errorString);
  }
});
```

電話番号とパスワードの組でサインアップする例：

```javascript
 // Sign up with phone/password, NO USERNAME
var phoneNumber = "+819012345678";
var password = "123ABC";

// Create the KiiUser object
var user = KiiUser.userWithPhoneNumber(phoneNumber, password);

// Register the user, defining callbacks for when the process completes
user.register({
  // Called on successful registration
  success: function(theUser) {
    // Print some info to the log
    console.log("User registered!");
    console.log(theUser);
  },
  // Called on a failed registration
  failure: function(theUser, errorString) {
    // Print some info to the log
    console.log("Error registering: " + errorString);
  }
});
```

これらのケースの場合、メールアドレスや電話番号の認証をオフにしておく必要があります（認証処理の詳細については次のセクションを参照してください）。

この他、｛メールアドレス、電話番号、パスワード｝の組によるサインアップや、｛ユーザ名、メールアドレス、電話番号、パスワード｝の組によるサインアップにも対応しています。詳細については、[Kii Cloud SDK JSDoc]({% page_url references-ja %}) 内の KiiUser クラスの解説を参照してください。

## メールアドレス/電話番号の認証を利用する

アプリ設定より、ユーザのメールアドレスや電話番号の認証をオンにできます（デフォルトはオフ）。認証のオン/オフは、以下のように開発者ポータルで設定します。

1. アプリケーションコンソール上の "Edit" ボタンをクリックします。

    ![](01.png)

1. "Settings" をクリックし、アプリ設定メニューを開きます。
1. ”Phone Number" と "Email Address" のチェックボックスを使い、電話番号（SMS）認証とメールアドレス認証をオン/オフします。

    ![](02.png)

認証をオンにすると、以下の手順で認証を行いつつサインアップ処理が実施されます

### メールアドレス認証

メールアドレス認証がオンの状態でメールアドレスを伴うアカウント作成処理が実行されると、Kii Cloud はこのメールアドレス宛に認証リンク付きメールを送信します。指定されたメールアドレスによるサインインは、ユーザがこの認証リンクをクリックするまで有効になりません。

### 電話番号（SMS）認証

電話番号（SMS）認証がオンの状態で電話番号を伴うアカウント作成処理が実行されると、Kii Cloud はこの電話番号宛てに認証コードを含む SMS を送信します。認証処理を完了するには、この認証コードをユーザより受け取り、Kii Cloud に送信する必要があります。指定された電話番号によるサインインは、この認証処理が完了するまで有効になりません。

### 注意
電話番号は、+と、国コードから始まる国際電話番号を指定してください。これにより Kii Cloud は SMS の宛先を決定することが可能となります。上記以外の形式が指定された場合、本人認証用 SMS が正しく送信できないことがあります。

SMS での認証用コード受信後、以下のように`verifyPhoneNumber`メソッドをコールして Kii Cloud に送信することで認証プロセスは完了します。 

```javascript
var user = Kii.currentUser();

// verify the phone number using a code sent via SMS
user.verifyPhoneNumber("012345", {
  success: function(theUser) {
    // do something with the verified user
  },
  failure: function(theUser, anErrorString) {
    // do something with the error response
  }
});
```
